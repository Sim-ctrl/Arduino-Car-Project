#include <U8g2lib.h>   //U8g2lib Bib fuer OLED-Display (vglb mit Adafruit) 
#include <Wire.h>     // beim ESP32 wird diese Zeile nicht benötigt

U8G2_SH1106_128X32_VISIONOX_F_HW_I2C oled(U8G2_R0, U8X8_PIN_NONE); 
//Je nach größe und art des Displays - ich habe oled Display 16*2 


//Bild ohne "Motor" im Hexadezimalsystem:
const unsigned char epd_bitmap_OhneMotor [] {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x84,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04,
  0x30, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04,
  0x30, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04,
  0x30, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x04, 0x07, 0xff, 0x84,
  0x30, 0x1c, 0x7c, 0x01, 0xc0, 0x1f, 0xe1, 0xfc, 0x78, 0x60, 0x00, 0xf8, 0x04, 0x08, 0x20, 0x78,
  0x30, 0x1c, 0x7c, 0x01, 0xc0, 0x1f, 0xf1, 0xfc, 0x78, 0x63, 0xc0, 0xf8, 0x08, 0x10, 0x10, 0x20,
  0x30, 0x1c, 0x7c, 0x01, 0xc0, 0x1f, 0xf1, 0xfc, 0x7c, 0x63, 0xc0, 0xf8, 0x08, 0x20, 0x08, 0x20,
  0x30, 0x1d, 0x83, 0x01, 0xc0, 0x00, 0x1d, 0x83, 0x87, 0x63, 0xe3, 0x06, 0x08, 0x20, 0x08, 0x20,
  0x33, 0x9d, 0x83, 0x01, 0xc0, 0x03, 0xfd, 0x83, 0x87, 0x7c, 0x3b, 0x06, 0x08, 0x20, 0x08, 0x20,
  0x33, 0x9d, 0x83, 0x01, 0xc0, 0x03, 0xfd, 0x83, 0x87, 0x7c, 0x3b, 0x06, 0x08, 0x20, 0x08, 0x20,
  0x3c, 0xfd, 0x83, 0x01, 0xc0, 0x18, 0x1d, 0x83, 0x87, 0x60, 0x3b, 0x06, 0x08, 0x20, 0x08, 0x20,
  0x3c, 0x7d, 0x83, 0x01, 0xc0, 0x1c, 0x1d, 0x83, 0x87, 0x60, 0x3b, 0x06, 0x08, 0x10, 0x10, 0x20,
  0x3c, 0x7d, 0x83, 0x01, 0xc0, 0x1c, 0x1d, 0x83, 0x87, 0x70, 0x3b, 0x86, 0x04, 0x08, 0x20, 0x40,
  0x30, 0x1c, 0x7c, 0x01, 0xff, 0xc3, 0xfd, 0x83, 0x87, 0x7f, 0xc0, 0xf8, 0x04, 0x07, 0xc0, 0x40,
  0x30, 0x1c, 0x7c, 0x01, 0xff, 0xc3, 0xfd, 0x83, 0x87, 0x7f, 0xc0, 0xf8, 0x02, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Bild von "1drehung", 16x9px
const unsigned char epd_bitmap_1drehung []  {
  0x00, 0x80, 0x04, 0x90, 0x02, 0xa0, 0x01, 0xc0, 0x0f, 0xf8, 0x01, 0xc0, 0x02, 0xa0, 0x04, 0x90,
  0x00, 0x80
};
// Bild von '2drehung', 16x9px
const unsigned char epd_bitmap_2drehung [] {
  0x00, 0x40, 0x02, 0x40, 0x01, 0x50, 0x0f, 0xe0, 0x03, 0xe0, 0x03, 0xf8, 0x05, 0xc0, 0x01, 0x20,
  0x01, 0x00
};
// '3drehung', 16x9px
const unsigned char epd_bitmap_3drehung [] {
  0x01, 0x00, 0x01, 0x20, 0x05, 0xc0, 0x03, 0xf8, 0x01, 0xe0, 0x0f, 0xe0, 0x01, 0xd0, 0x02, 0x40,
  0x00, 0x40
};
const int epd_bitmap_allArray_LEN = 3; // Die Bilder bestehen aus einer 3er Reihe
const unsigned char* epd_bitmap_allArray[3] = { // Bilder in ein Array packen, zur vereinfachung
  epd_bitmap_1drehung,
  epd_bitmap_2drehung,
  epd_bitmap_3drehung
};

//int progress = 0;  //wofür?
int frame = 0; //

void setup() {//Setup
  
  oled.begin(); //Methodenaufruf aus der Bib um Display zu starten
  oled.setColorIndex(1); // Display in Farbmodus setzen ( 1 = schwarz) 
}

void loop() {//Wird fortlaufend wiederholt
  
  oled.drawBitmap(0, 0, 128 / 8, 32, epd_bitmap_OhneMotor);
//Methodenaufruf. Bild bei 0,0 starten und dann "epd_bitmap_OhneMotor" laden
  oled.drawBitmap(103, 11, 16 / 8, 9, epd_bitmap_allArray[frame]);
//Methodenaufruf. Weiter rechts starten und dann Bild aus Array Laden   
  oled.sendBuffer();
  frame = frame + 1;//integer frame wird erhöht (Variable für Bilderarray)
  if (frame > 2) {    //Wenn frame größer als 2
    frame = 0;        // ist dann wird wieder bei 0 gestartet
  }
}
